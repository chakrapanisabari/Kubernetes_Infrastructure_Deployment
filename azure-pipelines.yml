# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: 'windows-latest'

stages:

  - stage: 'Validate'
    variables:        
    - group: 'Common_Infra_Variables' 
    jobs:
    - deployment: 'AKS_VALIDATION'    
      displayName: 'AKS_VALIDATION'
      environment: 'dev'
      strategy:
        runOnce:
          deploy:            
            steps:
              - task: TerraformInstaller@0
                displayName: 'install'
                inputs:
                  terraformVersion: '0.12.26'

              - task: TerraformTaskV1@0 
                displayName: 'init'
                inputs:
                  provider: 'azurerm'
                  command: 'init'
                  backendServiceArm: 'Azure_Service_Connection'
                  backendAzureRmResourceGroupName: '$(terraformResourceGroupName)'
                  backendAzureRmStorageAccountName: '$(terraformStorageAccountName)'
                  backendAzureRmContainerName: 'aks'
                  backendAzureRmKey: 'terraform.tfstate'
              - task: TerraformTaskV1@0
                displayName: 'validate'
                inputs:
                  provider: 'azurerm'
                  command: 'validate'

  - stage: 'Deploy'
    variables:        
    - group: 'Common_Infra_Variables' 
    jobs:
    - deployment: 'AKS_DEPLOYMENT'    
      displayName: 'AKS_DEPLOYMENT'
      environment: 'dev'
      strategy:
        runOnce:
          deploy:            
            steps:
            - checkout: self
            - task: TerraformInstaller@0
              displayName: 'install'
              inputs:
                terraformVersion: '0.12.26'
                
            - task: TerraformTaskV1@0 
              displayName: 'init'
              inputs:
                provider: 'azurerm'
                command: 'init'
                backendServiceArm: 'Azure_Service_Connection'
                backendAzureRmResourceGroupName: '$(terraformResourceGroupName)'
                backendAzureRmStorageAccountName: '$(terraformStorageAccountName)'
                backendAzureRmContainerName: 'aks'
                backendAzureRmKey: 'terraform.tfstate'
  
            - task: TerraformTaskV1@0
              displayName: 'plan'
              inputs:
                provider: 'azurerm'
                command: 'plan'
                commandOptions: '-var location=$(location) -var resourceGroupName=$(resourceGroupName) -var aksName=$(aksName) -var dnsPrefix=$(dnsPrefix) -var vmSize=$(vmSize) -var osDiskSizeGB=$(osDiskSizeGB) -var client_id=$(client_id) -var client_secret=$(client_secret) -var containerRegistryName=$(containerRegistryName) -var acrsku=$(acrsku)'
                environmentServiceNameAzureRM: 'Azure_Service_Connection'
            - task: TerraformTaskV1@0
              displayName: 'apply'
              inputs:
                provider: 'azurerm'
                command: 'apply'
                commandOptions: '-var location=$(location) -var resourceGroupName=$(resourceGroupName) -var aksName=$(aksName) -var dnsPrefix=$(dnsPrefix) -var vmSize=$(vmSize) -var osDiskSizeGB=$(osDiskSizeGB) -var client_id=$(client_id) -var client_secret=$(client_secret) -var containerRegistryName=$(containerRegistryName) -var acrsku=$(acrsku)'
                environmentServiceNameAzureRM: 'Azure_Service_Connection'